

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $documentableRegistry: '@monsieurbiz.search.registry.documentable'

    # Makes classes in src/ available to be used as services;
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../../src/*'
        exclude: '../../src/{Entity,Migrations,Tests,Kernel.php}'

    # Controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../../src/Controller'
        tags: ['controller.service_arguments']

    ##################################################################
    # 3) DÃ©coration de ProductMapperConfiguration du plugin
    ##################################################################
    # App\Search\Automapper\DecorateProductMapperConfiguration:
    #     decorates: 'MonsieurBiz\SyliusSearchPlugin\AutoMapper\ProductMapperConfiguration'
    #     decoration_inner_name: 'App\Search\Automapper\DecorateProductMapperConfiguration.inner'
    #     arguments:
    #         - '@App\Search\Automapper\DecorateProductMapperConfiguration.inner'
    # Define sorters
    App\Search\Request\Sorting\Product\ShortDescriptionSorter:
        tags:
            - { name: monsieurbiz.search.request.product_sorter }

    # Define custom boosts
    App\Search\Request\FunctionScore\Product\BoostExpensiveProductFunction:
        tags:
            - { name: monsieurbiz.search.request.product_function_score }

    # Define the taxon requests
    app.search.request.taxon_instant_search:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\InstantSearch
        arguments:
            $documentType: app_taxon
            $queryFilters: !tagged_iterator { tag: 'app.search.request.taxon_instant_search_filter' }
            $functionScores: !tagged_iterator { tag: 'app.search.request.taxon_function_score' }

    app.search.request.taxon_search:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\Search
        arguments:
            $documentType: app_taxon
            $queryFilters: !tagged_iterator { tag: 'app.search.request.taxon_search_filter' }
            $postFilters: !tagged_iterator { tag: 'app.search.request.taxon_post_filter' }
            $sorters: !tagged_iterator { tag: 'app.search.request.taxon_sorter' }
            $functionScores: !tagged_iterator { tag: 'app.search.request.taxon_function_score' }

    # Define the taxon query filters
    app.search.request.query_filter.taxon_instant_search.search_term_filter:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\QueryFilter\SearchTermFilter
        arguments:
            $fieldsToSearch:
                - 'name^5'
                - 'description'
                - 'name.autocomplete'
        tags:
            - { name: app.search.request.taxon_instant_search_filter }

    app.search.request.query_filter.taxon_search.search_term_filter:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\QueryFilter\SearchTermFilter
        arguments:
            $fieldsToSearch:
                - 'name^5'
                - 'description'
        tags:
            - { name: app.search.request.taxon_search_filter }
