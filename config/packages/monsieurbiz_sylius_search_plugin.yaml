parameters:
    monsieurbiz.search.product.is_in_stock_scoring_boost: 200 # Enable the boost for in stock products
    monsieurbiz.search.product.search.fields_to_search: 
        - 'name^5'
        - 'description'
        - 'short_description' # We add our new value in search
    monsieurbiz.search.product.search.nested_fields_to_search:
        - 'main_taxon:name^2' # We add our new nested value in instant search
    monsieurbiz.search.product.instant.fields_to_search: 
        - 'name^5'
        - 'name.autocomplete'
        - 'description'
        - 'short_description' # We add our new value in search
    monsieurbiz.search.product.instant.nested_fields_to_search:
        - 'main_taxon:name^2' # We add our new nested value in instant search


services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $documentableRegistry: '@monsieurbiz.search.registry.documentable'

    # Makes classes in src/ available to be used as services;
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../../src/*'
        exclude: '../../src/{Entity,Migrations,Tests,Kernel.php}'

    # Controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../../src/Controller'
        tags: ['controller.service_arguments']

    # Add short_description in indexed data with the logic to get the value
    App\Search\Automapper\DecorateProductMapperConfiguration:
        decorates: MonsieurBiz\SyliusSearchPlugin\AutoMapper\ProductMapperConfiguration
        arguments:
            - '@.inner'
    # Define sorters
    App\Search\Request\Sorting\Product\ShortDescriptionSorter:
        tags:
            - { name: monsieurbiz.search.request.product_sorter }

    # Define custom boosts
    App\Search\Request\FunctionScore\Product\BoostExpensiveProductFunction:
        tags:
            - { name: monsieurbiz.search.request.product_function_score }

    # Define the taxon requests
    app.search.request.taxon_instant_search:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\InstantSearch
        arguments:
            $documentType: app_taxon
            $queryFilters: !tagged_iterator { tag: 'app.search.request.taxon_instant_search_filter' }
            $functionScores: !tagged_iterator { tag: 'app.search.request.taxon_function_score' }

    app.search.request.taxon_search:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\Search
        arguments:
            $documentType: app_taxon
            $queryFilters: !tagged_iterator { tag: 'app.search.request.taxon_search_filter' }
            $postFilters: !tagged_iterator { tag: 'app.search.request.taxon_post_filter' }
            $sorters: !tagged_iterator { tag: 'app.search.request.taxon_sorter' }
            $functionScores: !tagged_iterator { tag: 'app.search.request.taxon_function_score' }

    # Define the taxon query filters
    app.search.request.query_filter.taxon_instant_search.search_term_filter:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\QueryFilter\SearchTermFilter
        arguments:
            $fieldsToSearch:
                - 'name^5'
                - 'description'
                - 'name.autocomplete'
        tags:
            - { name: app.search.request.taxon_instant_search_filter }

    app.search.request.query_filter.taxon_search.search_term_filter:
        class: MonsieurBiz\SyliusSearchPlugin\Search\Request\QueryFilter\SearchTermFilter
        arguments:
            $fieldsToSearch:
                - 'name^5'
                - 'description'
        tags:
            - { name: app.search.request.taxon_search_filter }



monsieurbiz_sylius_search:
  documents:
    app_taxon:
      source: 'Sylius\Component\Core\Model\TaxonInterface'
      target: 'App\Search\Model\Taxon\TaxonDTO'
      templates:
        item: '@MonsieurBizSyliusSearchPlugin/Search/Taxon/_box.html.twig'
        instant: '@MonsieurBizSyliusSearchPlugin/Instant/Taxon/_box.html.twig'
      datasource: 'App\Search\Model\Datasource\TaxonDatasource'
      position: 2
      limits:
        search: [9, 18, 27]
        taxon: [9, 18, 27]
        instant_search: [5]

  automapper_classes:
    sources:
      taxon: '%sylius.model.taxon.class%'
    targets:
      app_taxon: 'App\Search\Model\Taxon\TaxonDTO'

  # **Ajoutez cette section** pour qu’Elastically sache où trouver vos fichiers de mapping
  elastically_configuration_paths:
    - '%kernel.project_dir%/src/Resources/config/elasticsearch'
